<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	    <beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
    	<beans:property name="basenames">
    		<beans:list>
    			<beans:value>classpath:config/messages</beans:value>
    			<beans:value>classpath:org/springframework/security/messages</beans:value>
    		</beans:list>
    	</beans:property>
    </beans:bean>
	<!--访问控制 -->
	<http auto-config="true">
		<!-- intercept-url:拦截器,可以设定哪些路径需要哪些权限来访问. filters=none 不使用过滤,也可以理解为忽略 -->
		<intercept-url pattern="/favicon.ico" filters="none" />
		<intercept-url pattern="/commons/**" filters="none" />
		<intercept-url pattern="/**/js/**" filters="none" />
		<intercept-url pattern="/**/css/**" filters="none" />
		<intercept-url pattern="/**/images/**" filters="none" />
		<intercept-url pattern="/loginPage/" filters="none" />
		<intercept-url pattern="/login/**" filters="none" />
		

		<!-- login-page:默认指定的登录页面. authentication-failure-handler-ref:验证失败处理器 default-target-url:成功登陆后跳转页面 
			authentication-success-handler-ref：自定义成功处理器，使用自定义成功处理器时always-use-default-target和default-target-url无效 -->
		<form-login login-page="/loginPage"
			authentication-failure-handler-ref="simpleUrlAuthenticationFailureHandler"
			login-processing-url="/j_spring_security_check"
			always-use-default-target="true" default-target-url="/"
			authentication-success-handler-ref="authenticationSuccessHandler" />

		<!-- logout-success-url:成功注销后跳转到的页面;logout-url="/j_security_logout"是默认值 -->
		<logout logout-url="/j_security_logout"
			logout-success-url="/loginPage" invalidate-session="true" />
		<custom-filter before="SESSION_MANAGEMENT_FILTER" ref="sessionManagementFilter"/>
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="securityInterceptorFilter" />
		<custom-filter after="EXCEPTION_TRANSLATION_FILTER" ref="anonymousAccessDeniedHandler"/>
			
	</http>

	<!-- 验证失败处理器， 使用转发， 为了在request里面存储错误信息 -->
	<beans:bean id="simpleUrlAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="useForward" value="true" />
		<beans:property name="defaultFailureUrl" value="/login/invalid" />
	</beans:bean>

	<!-- 登录认证成功处理器，主要控制一些特殊地址认证成功后的走向 -->
	<beans:bean id="authenticationSuccessHandler"
		class="com.jc.cz_index.core.web.security.AuthenticationSuccessHandler">
		<beans:property name="alwaysUseDefaultTargetUrl" value="true" />
		<beans:property name="defaultTargetUrl" value="/" />
		<beans:property name="successEvents">
			<beans:list>
				<beans:ref bean="saveUserInfoForLogined"/>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- 会话管理 配置 -->
	<beans:bean id="sessionManagementFilter" class="com.jc.cz_index.core.web.security.SessionManagementFilter">
		<beans:property name="invalidSessionUrl" value="/loginPage" />
	</beans:bean>
	<!-- 匿名用户权限认证失败处理器 -->
	<beans:bean id="anonymousAccessDeniedHandler" class="com.jc.cz_index.core.web.security.AnonymousAccessDeniedHandler">
		<beans:property name="redirectUrl" value="/loginPage"/>
	</beans:bean>

	<!-- 安全拦截filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<beans:bean id="securityInterceptorFilter"
		class="com.jc.cz_index.core.web.security.SecurityInterceptorFilter">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
		<beans:property name="accessDecisionManager" ref="accessDecisionManager" />
		<!--资源源数据定义，即定义某一资源可以被哪些角色访问 -->
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>


	<!-- 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="authenticationprovider">
		</authentication-provider>
	</authentication-manager>

	<!-- 主要目的是设置 hideUserNotFoundExceptions 为 false 这里可以封装登录验证信息到 UsernameNotFoundException 
		异常中 -->
	<beans:bean id="authenticationprovider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="hideUserNotFoundExceptions"
			value="false" />
		<beans:property name="userDetailsService" ref="userDetailsService" />
		<beans:property name="passwordEncoder" ref="md5" />
	</beans:bean>
	<beans:bean id="md5" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	
	<!-- 用于web的ExpressionHandler -->
	<beans:bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>

</beans:beans>